openapi: 3.0.0
info:
  title: Rex
  description: |
    Rex is a tool for keeping track of ideas for things to do and providing, on demand, a random one. More broadly, it
    represents a web service which requires the implementor to solve a number of interesting challenges including
    how to efficiently select a random item from a collection, support multiple distinct API versions with differing
    feature sets (while maintaining backwards and forwards client compatibility), handle authentication and authorization.

  license:
    name: MIT
    url: https://sierrasoftworks.com/licenses/MIT
  version: 3.0.0

servers:
  - url: https://rex.sierrasoftworks.com
    description: Production
  - url: https://rex-staging.sierrasoftworks.com
    description: Staging
  - url: http://localhost:8000
    description: Development.

tags:
  - name: health
    description: |
      Rex's server exposes a series of health endpoints which are intended to be called by a combination
      of the hosting platform, load balancers and external monitoring tooling to certify the availability
      of the application.

      These endpoints are intended to be safe to call repeatedly and report a binary status code response
      (either `200 OK` or `503 Service Unavailable`) and may expose additional contextual information including
      a soft health indicator, uptime, error context and more.

  - name: ideas
    description: |
      APIs used to manage and retrieve ideas.

  - name: collections
    description: |
      APIs used to manage collections of ideas.
      
  - name: diagnostics
    description: |
      Sometimes things don't work out the way you want them to and having someone/something to hold your hand
      and help you debug (especially in production) can be incredibly helpful. These API methods are designed
      to support debugging of flows which might otherwise be challenging to test outside of a production
      environment (including auth, RBAC etc).
paths:
  /api/v1/auth:
    get:
      tags:
        - diagnostics
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Authentication Claims (v1)
      description: |
        

      operationId: auth_info_v1
      responses:
        200:
          description: List of claims.
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                example:
                  name: Testy McTesterson
                  scp: user_impersonation
                  role: User

        401:
          $ref: "#/components/responses/Unauthorized"

  /api/v1/health:
    get:
      tags:
        - health

      summary: Get Health (v1)
      description: Gets the current health status of the Rex instance.
      operationId: health_v1
      deprecated: true
      responses:
        200:
          description: The service is healthy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthV1"
              example:
                ok: true
        503:
          description: The service is unhealthy.

  /api/v2/health:
    get:
      tags:
        - health

      summary: Get Health (v2)
      description: Gets the current health status of the Rex instance.
      operationId: health_v2
      responses:
        200:
          description: The service is healthy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthV2"
              example:
                ok: true
                started_at: "2019-03-14T23:17:27.210333300Z"
        500:
          description: The service is unhealthy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthV2"
              example:
                ok: false
                started_at: "2019-03-14T23:17:27.210333300Z"

  /api/v1/ideas:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Ideas (v1)
      description: |
        Gets the list of ideas that you have stored on the server. Usually, clients should avoid using this method to
        present ideas to their users, as it removes the ability to make "random suggestions" about what to do. This
        method may, however, be useful to enable users to manage and curate their list of ideas (allowing them to update
        and/or delete ideas which they are no longer interested in).
        
        As with all `v1` methods, these ideas
        are stored in your own personal collection (which you will always have access to). By default, these
        ideas are not available to any other users, however you can share your collections using the `v3` API.

        **NOTE** The `v1` API has been deprecated in favour of the `v2` and `v3` APIs. The migration from `v1`
        to `v2` should be non-breaking for most clients and introduces support for tagging of ideas. Where possible,
        clients should be updated to support the `v3` API which adds support for multiple idea collections and sharing.
      operationId: ideas_v1
      deprecated: true

      responses:
        200:
          description: List of ideas
          content:
            application/json:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV1"
            text/xml:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV1"
                xml:
                  name: Ideas
                  wrapped: true
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: New Idea (v1)
      description: Creates a new idea on the server.
      operationId: new_idea_v1
      deprecated: true
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV1"
          text/xml:
            schema:
              $ref: "#/components/schemas/IdeaV1"
      responses:
        201:
          description: Idea was created.
          headers:
            Location:
              description: The relative path at which you can find the newly created object.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV1"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV1"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/idea/random:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Random Idea (v1)
      description: Gets a single randomly selected idea from the server.
      operationId: random_idea_v1
      deprecated: true
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV1"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV1"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/idea/{id}:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Idea (v1)
      description: Gets a specific idea from the server based on its ID.
      operationId: idea_v1
      deprecated: true
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV1"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV1"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Store Idea (v1)
      description: Stores an idea idempotently with the given identifier, replacing an existing instance if one is present.
      operationId: store_idea_v1
      deprecated: true
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV1"
      responses:
        200:
          description: Stored idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV1"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV1"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Remove Idea (v1)
      description: Removes a specific idea from the server based on its ID.
      operationId: remove_idea_v1
      deprecated: true
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to remove.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      responses:
        204:
          description: Idea removed.
        404:
          description: The idea could not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v2/ideas:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Ideas (v2)
      description: Gets the list of ideas registered with the server.
      operationId: ideas_v2
      parameters:
        - name: tag
          in: query
          description: An optional tag which can be used to limit the resulting ideas.
          required: false
          schema:
            type: string
          example: test
        - name: complete
          in: query
          description: An optional filter which may be used to constrain which ideas are returned.
          required: false
          schema:
            type: boolean
          example: false
      responses:
        200:
          description: List of ideas
          content:
            application/json:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV2"
            text/xml:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV2"
                xml:
                  name: Ideas
                  wrapped: true

        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: New Idea (v2)
      description: Creates a new idea on the server.
      operationId: new_idea_v2
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV2"
          text/xml:
            schema:
              $ref: "#/components/schemas/IdeaV2"
      responses:
        201:
          description: Idea was created.
          headers:
            Location:
              description: The relative path at which you can find the newly created object.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV2"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV2"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v2/idea/random:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Random Idea (v2)
      description: Gets a single randomly selected idea from the server.
      operationId: random_idea_v2
      parameters:
        - name: tag
          in: query
          description: An optional tag which can be used to limit the resulting ideas.
          required: false
          schema:
            type: string
          example: test
        - name: complete
          in: query
          description: An optional filter which may be used to constrain which ideas are returned.
          required: false
          schema:
            type: boolean
          example: false
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV2"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV2"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v2/idea/{id}:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Idea (v2)
      description: Gets a specific idea from the server based on its ID.
      operationId: idea_v2
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV2"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV2"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Store Idea (v2)
      description: Stores an idea idempotently with the given identifier, replacing an existing instance if one is present.
      operationId: store_idea_v2
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV2"
          text/xml:
            schema:
              $ref: "#/components/schemas/IdeaV2"
      responses:
        200:
          description: Stored idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV2"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV2"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Remove Idea (v2)
      description: Removes a specific idea from the server based on its ID.
      operationId: remove_idea_v2
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to remove.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      responses:
        204:
          description: Idea removed.
        404:
          description: The idea could not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/ideas:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Ideas (v3)
      description: Gets the list of ideas registered with the server.
      operationId: ideas_v3
      parameters:
        - name: tag
          in: query
          description: An optional tag which can be used to limit the resulting ideas.
          required: false
          schema:
            type: string
          example: test
        - name: complete
          in: query
          description: An optional filter which may be used to constrain which ideas are returned.
          required: false
          schema:
            type: boolean
          example: false
      responses:
        200:
          description: List of ideas
          content:
            application/json:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV3"
                xml:
                  name: Ideas
                  wrapped: true

        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: New Idea (v3)
      description: Creates a new idea on the server.
      operationId: new_idea_v3
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV3"
          text/xml:
            schema:
              $ref: "#/components/schemas/IdeaV3"
      responses:
        201:
          description: Idea was created.
          headers:
            Location:
              description: The relative path at which you can find the newly created object.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/idea/random:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Random Idea (v3)
      description: Gets a single randomly selected idea from the server.
      operationId: random_idea_v3
      parameters:
        - name: tag
          in: query
          description: An optional tag which can be used to limit the resulting ideas.
          required: false
          schema:
            type: string
          example: test
        - name: complete
          in: query
          description: An optional filter which may be used to constrain which ideas are returned.
          required: false
          schema:
            type: boolean
          example: false
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/idea/{id}:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Idea (v3)
      description: Gets a specific idea from the server based on its ID.
      operationId: idea_v3
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Store Idea (v2)
      description: Stores an idea idempotently with the given identifier, replacing an existing instance if one is present.
      operationId: store_idea_v3
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV3"
          text/xml:
            schema:
              $ref: "#/components/schemas/IdeaV3"
      responses:
        200:
          description: Stored idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Remove Idea (v3)
      description: Removes a specific idea from the server based on its ID.
      operationId: remove_idea_v3
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to remove.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
      responses:
        204:
          description: Idea removed.
        404:
          description: The idea could not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/collection/{collectionId}/ideas:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Ideas (v3)
      description: Gets the list of ideas registered with the server.
      operationId: ideas_by_collection_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection from which to fetch ideas.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
        - name: tag
          in: query
          description: An optional tag which can be used to limit the resulting ideas.
          required: false
          schema:
            type: string
          example: test
        - name: complete
          in: query
          description: An optional filter which may be used to constrain which ideas are returned.
          required: false
          schema:
            type: boolean
          example: false
      responses:
        200:
          description: List of ideas
          content:
            application/json:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                type: array
                description: The list of ideas registered with the server.
                items:
                  $ref: "#/components/schemas/IdeaV3"
                xml:
                  name: Ideas
                  wrapped: true

        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: New Idea (v3)
      description: Creates a new idea on the server.
      operationId: new_idea_by_collection_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection in which to create the idea.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV3"
          text/xml:
            schema:
              $ref: "#/components/schemas/IdeaV3"
      responses:
        201:
          description: Idea was created.
          headers:
            Location:
              description: The relative path at which you can find the newly created object.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/collection/{collectionId}/idea/random:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Random Idea (v3)
      description: Gets a single randomly selected idea from the server.
      operationId: random_idea_by_collection_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection from which to retrieve the idea.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
        - name: tag
          in: query
          description: An optional tag which can be used to limit the resulting ideas.
          required: false
          schema:
            type: string
          example: test
        - name: complete
          in: query
          description: An optional filter which may be used to constrain which ideas are returned.
          required: false
          schema:
            type: boolean
          example: false
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/collection/{collectionId}/idea/{id}:
    get:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Read]

      summary: Get Idea (v3)
      description: Gets a specific idea from the server based on its ID.
      operationId: idea_by_collection_v3
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
        - name: collectionId
          in: path
          description: The unique ID of the collection from which to retrieve the idea.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
      responses:
        200:
          description: Randomly selected idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Store Idea (v3)
      description: Stores an idea idempotently with the given identifier, replacing an existing instance if one is present.
      operationId: store_idea_by_collection_v3
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
        - name: collectionId
          in: path
          description: The unique ID of the collection in which to store the idea.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
      requestBody:
        description: The idea to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdeaV3"
          text/xml:
            schema:
              $ref: "#/components/schemas/IdeaV3"
      responses:
        200:
          description: Stored idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdeaV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/IdeaV3"
        404:
          description: The server could not find any ideas, please submit one and try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - ideas
      security:
        - AzureAD: [Ideas.Write]

      summary: Remove Idea (v3)
      description: Removes a specific idea from the server based on its ID.
      operationId: remove_idea_by_collection_v3
      parameters:
        - name: id
          in: path
          description: The unique ID of the idea you wish to remove.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: "225c5957d7f450baec75a67ede427e9"
        - name: collectionId
          in: path
          description: The unique ID of the collection in which to store the idea.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
      responses:
        204:
          description: Idea removed.
        404:
          description: The idea could not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/collections:
    get:
      tags:
        - collections
      security:
        - AzureAD: [Collections.Read]

      summary: Get Collections (v3)
      description: Gets the list of collections that this user can access.
      operationId: collections_v3
      responses:
        200:
          description: List of collections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CollectionV3"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CollectionV3"
                xml:
                  name: Collections
                  wrapped: true
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - collections
      security:
        - AzureAD: [Collections.Write]

      summary: New Collection (v3)
      description: Creates a new collection with the provided name.
      operationId: new_collection_v3
      requestBody:
        description: The collection to add to the server.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionV3"
          text/xml:
            schema:
              $ref: "#/components/schemas/CollectionV3"
      responses:
        201:
          description: Collection has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/CollectionV3"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/collection/{collectionId}:
    get:
      tags:
        - collections
      security:
        - AzureAD: [Collections.Read]

      summary: Get Collection (v3)
      description: Gets a collection that a user can access by its ID.
      operationId: collection_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
      responses:
        200:
          description: Collection found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/CollectionV3"
        404:
          description: Collection not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - collections
      security:
        - AzureAD: [Collections.Write]

      summary: Remove Collection (v3)
      description: Removes a collection from a user's list using its ID.
      operationId: remove_collection_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection to remove.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
      responses:
        204:
          description: Collection removed.
        400:
          description: Collection has no other owners and cannot be removed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 400
                error: Bad Request
                description: You cannot remove a collection without promoting another user as an owner of the collection.
        404:
          description: Collection not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/collection/{collectionId}/users:
    get:
      tags:
        - collections
      security:
        - AzureAD: [RoleAssignments.Write]

      summary: Get Collection Role Assignments (v3)
      description: Gets the list of users which can access this collection and their role assignments.
      operationId: role_assignments_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection to retrieve users for.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
      responses:
        200:
          description: List of role assignments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleAssignmentV3"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleAssignmentV3"
                xml:
                  name: RoleAssignments
                  wrapped: true
        404:
          description: Collection not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v3/collection/{collectionId}/user/{userId}:
    get:
      tags:
        - collections
      security:
        - AzureAD: [RoleAssignments.Write]

      summary: Get User Role Assignment (v3)
      description: Gets the details of a user's role assignment within a collection.
      operationId: role_assignment_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection to retrieve the user from.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
        - name: userId
          in: path
          description: The unique ID of the user to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: c0baec767ed2557f957d2545ae427e9
      responses:
        200:
          description: User role assignment details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleAssignmentV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/RoleAssignmentV3"
        404:
          description: Collection or role assignment not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - collections
      security:
        - AzureAD: [RoleAssignments.Write]

      summary: Update User Role Assignment (v3)
      description: Update the role assignment associated with a user on a given collection.
      operationId: update_role_assignment_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection to retrieve the user from.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
        - name: userId
          in: path
          description: The unique ID of the user to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: c0baec767ed2557f957d2545ae427e9
      requestBody:
        description: The role assignment to apply for this user when accessing the collection.
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/RoleAssignmentV3'
          text/xml:
            schema: 
              $ref: '#/components/schemas/RoleAssignmentV3'
      responses:
        200:
          description: User role assignment details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleAssignmentV3"
            text/xml:
              schema:
                $ref: "#/components/schemas/RoleAssignmentV3"
        404:
          description: Collection not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - collections
      security:
        - AzureAD: [RoleAssignments.Write]

      summary: Remove User Role Assignment (v3)
      description: Removes a user's role assignment from a collection.
      operationId: remove_role_assignment_v3
      parameters:
        - name: collectionId
          in: path
          description: The unique ID of the collection to retrieve the user from.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: 957d25c0baec7557f45a67ed2e427e9
        - name: userId
          in: path
          description: The unique ID of the user to retrieve.
          required: true
          schema:
            type: string
            pattern: ^[a-f0-9]{32}$
            example: c0baec767ed2557f957d2545ae427e9
      responses:
        204:
          description: Role assignment removed.
        404:
          description: Collection or role assignment not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                error: Not Found
                description: The resource you were looking for could not be found, please check your request and try again.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    AzureAD:
      type: oauth2
      description: |
        Authentication for Rex is handled through Azure Active Directory and we use [JSON Web Tokens](https://jwt.io)
        to authenticate and authorize individual requests. Authentication tokens are passed in the `Authorization` HTTP
        header and use the `Bearer` scheme, for example:

        ```http
        GET /api/v1/ideas HTTP/1.1
        Host: https://rex.sierrasoftworks.com
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        ```

        Authentication will currently only succeed for users within the Sierra Softworks AAD tenant (`a26571f1-22b3-4756-ac7b-39ca684fab48`)
        and for tokens whose audience (`aud`) field specifies `https://rex.sierrasoftworks.com`. Any other tokens will fail
        to authenticate the user and result in a `401 Unauthorized` response.

        Rex takes advantage of both roles (`Administrator` or `User`) and OAuth Scopes to control access to resources. Roles
        allow restrictions to be placed on specific users, while Scopes allow users to regulate the access that 3rd party
        applications (using on-behalf-of tokens) have to the Rex API.
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/a26571f1-22b3-4756-ac7b-39ca684fab48/oauth2/v2.0/authorize
          scopes:
            "Ideas.Read": Allows an application to use `GET` methods associated with a user's ideas, or ideas that the user has access to in known collections.
            "Ideas.Write": Allows an application to use `POST`, `PUT` and `DELETE` methods to create, update and remove ideas for the user, or that the user has access to in known collections.
            "Collections.Read": Allows an application to use `GET` methods to retrieve the list of collections that the user has access to, or information about specific collections.
            "Collections.Write": Allows an application to use `POST`, `PUT` and `DELETE` methods to create, update and remove collections that the user has access to.
            "RoleAssignments.Write": Allows an application to use `PUT` and `DELETE` methods to modify the role assignments on collections that the user has `Admin` permissions on.

  parameters:
    Auth:
      in: header
      name: Authorization
      required: true
      description: The authorization token used to identify you when calling the API.
      schema:
        type: string
        example: Bearer ...

  responses:
    Unauthorized:
      description: You have not provided a valid authentication token.
      headers:
        WWW-Authenticate:
          schema:
            type: string
            example: Bearer
          required: true
    Forbidden:
      description: Your access token does not grant you the required role or scopes needed to access this resource.
    InternalServerError:
      description: The server failed to process your request successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 500
            error: Internal Server Error
            description: The server encountered an error while processing your request, please try again later.

  schemas:
    HealthV1:
      deprecated: true
      required:
        - ok
      type: object
      properties:
        ok:
          type: boolean
          description: Whether the service is healthy or not.
          readOnly: true
          example: true
          xml:
            name: OK
      xml:
        name: Health

    HealthV2:
      required:
        - ok
        - started_at
      type: object
      properties:
        ok:
          type: boolean
          description: Whether the service is healthy or not.
          readOnly: true
          example: true
          xml:
            name: OK
        started_at:
          type: string
          description: The ISO 8601 datetime at which the service was started.
          format: datetime
          readOnly: true
          example: "2019-03-14T23:17:27.210333300Z"
          xml:
            name: StartedAt
      xml:
        name: Health

    IdeaV1:
      deprecated: true
      required:
        - description
        - name
      type: object
      properties:
        id:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify this idea internally.
          readOnly: true
          example: "225c5957d7f450baec75a67ede427e9"
          xml:
            attribute: true
        name:
          type: string
          description: The short name used to identify this idea.
          example: Test Idea
          xml:
            name: Name
        description:
          type: string
          description:
            A longer description providing more information about this
            idea.
          example: This is a test idea.
          xml:
            name: Description
      xml:
        name: Idea

    IdeaV2:
      required:
        - description
        - name
      type: object
      properties:
        id:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify this idea internally.
          readOnly: true
          example: "225c5957d7f450baec75a67ede427e9"
          xml:
            attribute: true
        name:
          type: string
          description: The short name used to identify this idea.
          example: Test Idea
          xml:
            name: Name
        description:
          type: string
          description:
            A longer description providing more information about this
            idea.
          example: This is a test idea.
          xml:
            name: Description
        tags:
          maxItems: 10
          minItems: 0
          type: array
          description: The list of tags you wish to associate with an idea
          items:
            maxLength: 50
            type: string
            description: A short string tag describing this idea
            example: Winter
            xml:
              name: Tag
          xml:
            name: Tags
            wrapped: true
        completed:
          type: boolean
          description: Whether this idea has been completed or not.
          default: false
          xml:
            attribute: true
      xml:
        name: Idea

    IdeaV3:
      required:
        - description
        - name
      type: object
      properties:
        id:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify this idea internally.
          readOnly: true
          example: "225c5957d7f450baec75a67ede427e9"
          xml:
            attribute: true
        collection:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify the collection that this idea belongs to.
          readOnly: true
          example: "957d25c0baec7557f45a67ed2e427e9"
          xml:
            attribute: true
        name:
          type: string
          description: The short name used to identify this idea.
          example: Test Idea
          xml:
            name: Name
        description:
          type: string
          description:
            A longer description providing more information about this
            idea.
          example: This is a test idea.
          xml:
            name: Description
        tags:
          maxItems: 10
          minItems: 0
          type: array
          description: The list of tags you wish to associate with an idea
          items:
            maxLength: 50
            type: string
            description: A short string tag describing this idea
            example: Winter
            xml:
              name: Tag
          xml:
            name: Tags
            wrapped: true
        completed:
          type: boolean
          description: Whether this idea has been completed or not.
          default: false
          xml:
            attribute: true
      xml:
        name: Idea

    CollectionV3:
      type: object
      required:
        - name
      properties:
        id:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify this collection internally.
          readOnly: true
          example: "957d25c0baec7557f45a67ed2e427e9"
          xml:
            name: id
            attribute: true
        userId:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify the user that this collection entry belongs to.
          readOnly: true
          example: "c0baec767ed2557f957d2545ae427e9"
          xml:
            name: user-id
            attribute: true
        name:
          type: string
          description: The name that the user has given to this collection. This may vary on a per-user basis.
          example: In the Mountains
          xml:
            name: Name
      xml:
        name: Collection

    UserV3:
      type: object
      required:
        - id
        - emailHash
        - firstName
      properties:
        id:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify the user internally.
          readOnly: true
          example: "c0baec767ed2557f957d2545ae427e9"
          xml:
            name: id
            attribute: true
        emailHash:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique has which represents the user's email address in Gravatar compatible format.
          readOnly: true
          example: "7ed2557cc760d2545ae42ef9ba577e9"
          xml:
            name: email-hash
            attribute: true
        firstName:
          type: string
          description: The name that the user wishes to use on the service.
          readOnly: true
          example: Bob
          xml:
            name: FirstName
      xml:
        name: User

    RoleAssignmentV3:
      type: object
      required:
        - userId
        - collectionId
        - role
      properties:
        userId:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify the user that this role assignment applies to.
          example: "c0baec767ed2557f957d2545ae427e9"
          xml:
            name: user-id
            attribute: true
        collectionId:
          pattern: ^[a-z0-9]{32}$
          type: string
          description: A unique ID used to identify the collection that this role assignment applies to.
          example: "957d25c0baec7557f45a67ed2e427e9"
          xml:
            name: collection-id
            attribute: true
        role:
          type: string
          description: The role that the user has been granted on this collection.
          example: Owner
          enum:
            - Owner
            - Contributor
            - Viewer
          xml:
            name: role
            attribute: true
      xml:
        name: RoleAssignment

    Error:
      type: object
      description: An error describing a problem that the server has encountered or identified.
      required:
        - code
        - error
        - message
      properties:
        code:
          type: number
          format: integer
          minimum: 100
          maximum: 599
          description: The HTTP status code corresponding to this error.
        error:
          type: string
          description: The human readable description of the HTTP status code.
        description:
          type: string
          description: A human readable description of the exact error that occurred.